# -------------------
# SCALARS
# -------------------
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

# -------------------
# QUERIES
# -------------------
type Query {
    # Buscar un usuario por ID o email
    user(
        id: ID
            @eq
            @rules(
                apply: ["prohibits:email", "required", "exists:users,id"]
                messages: [{ rule: "exists", message: "Usuario no encontrado" }]
            )
        email: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    # Listar usuarios filtrando por nombre
    users(name: String @where(operator: "like")): [User!]! @all
}

# -------------------
# INPUTS
# -------------------
input CreateUserInput {
    name: String!
    email: String!
    phone: String!
}

input UpdateUserInput {
    name: String!
    email: String!
    phone: String!
}

# -------------------
# Response
# -------------------

type UserMutationResponse {
    code: Int!
    status: Boolean!
    message: String!
    data: User
}

type UserDeleteMutationResponse {
    code: Int!
    status: Boolean!
    message: String!
    data: Boolean
}
# -------------------
# MUTATIONS
# -------------------
type Mutation {
    createUser(input: CreateUserInput!): UserMutationResponse
        @field(resolver: "App\\GraphQL\\Mutations\\UserMutations@createUser")
    updateUser(
        id: ID!
            @rules(
                apply: ["required", "exists:users,id"]
                messages: [
                    {
                        rule: "required"
                        message: "El ID del usuario es requerido."
                    }
                    {
                        rule: "exists"
                        message: "El usuario seleccionado no existe."
                    }
                ]
            )
        input: UpdateUserInput!
    ): UserMutationResponse
        @field(resolver: "App\\GraphQL\\Mutations\\UserMutations@updateUser")
    deleteUser(
        id: ID!
            @rules(
                apply: ["required", "exists:users,id"]
                messages: [
                    {
                        rule: "required"
                        message: "El ID del usuario es requerido."
                    }
                    {
                        rule: "exists"
                        message: "El usuario seleccionado no existe."
                    }
                ]
            )
    ): UserDeleteMutationResponse
        @field(resolver: "App\\GraphQL\\Mutations\\UserMutations@deleteUser")
}

# -------------------
# TYPE USER
# -------------------
type User {
    id: ID!
    name: String!
    email: String!
    phone: String!
    created_at: DateTime!
    updated_at: DateTime!
}
